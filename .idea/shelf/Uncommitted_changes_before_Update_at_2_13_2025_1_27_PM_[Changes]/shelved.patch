Index: model/PatronCollection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model; //in model folder\r\n\r\n// project imports (just copied from account collection, no idea what these do)\r\nimport java.util.Properties;\r\nimport java.util.Vector;\r\n//import javafx.scene.Scene;\r\nimport exception.InvalidPrimaryKeyException;\r\nimport event.Event;\r\nimport database.*;\r\nimport impresario.IView;\r\n//import userinterface.View;\r\n//import userinterface.ViewFactory;\r\n\r\n\r\npublic class PatronCollection\r\n{\r\n    private static final String myTableName = \"Patron\"; //establish database table name\r\n\r\n    private Vector<Patron> PatronList; //create booklist\r\n\r\n    public PatronCollection() {\r\n        //super(myTableName); //saw this in account collection, looked important\r\n        patronList = new Vector<Patron>(); //constructor\r\n    }\r\n\r\n\r\n    public Vector<Patron> findPatronsOlderThanDate(String date) {\r\n        // SQL Implementation here\r\n        String query = \"SELECT * FROM \" + myTableName + \" WHERE (dateOfBirth < '\" + date +\"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n        return processPatronData(allDataRetrieved);\r\n\r\n    }\r\n\r\n\r\n    public Vector<Patron> findPatronsYoungerThan(String date) {\r\n        // SQL Implementation here\r\n        String query = \"SELECT * FROM \" + myTableName + \" WHERE (dateOfBirth > '\" + date +\"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n        return processPatronData(allDataRetrieved);\r\n\r\n    }\r\n\r\n\r\n    public Vector<Patron> findPatronsAtZipCode(String zip){\r\n\r\n        String query = \"SELECT * FROM \" + myTableName + \" WHERE (zip > '\" + zip +\"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n        return processPatronData(allDataRetrieved);\r\n\r\n    }\r\n\r\n    public Vector<Patron> findPatronsWithNameLike(String name){\r\n        // SQL Implementation here\r\n        String query = \"SELECT * FROM \" + myTableName + \" WHERE name LIKE '%\" + name + \"%'\"; //sql query to find books written by same author\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n        return processPatronData(allDataRetrieved);\r\n    }\r\n\r\n    private Vector<Patron> processPatronData(Vector<Patron> allDataRetrieved) {\r\n        if (allDataRetrieved != null) {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++) {\r\n                Properties nextPatron = (Properties) allDataRetrieved.elementAt(cnt);\r\n                patronList.add(new Patron(nextPatron));\r\n            }\r\n        }\r\n        return patronList;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/PatronCollection.java b/model/PatronCollection.java
--- a/model/PatronCollection.java	(revision 2846b654b4ad277e3ccb2d35cd024207c6e8516d)
+++ b/model/PatronCollection.java	(date 1739471124646)
@@ -7,63 +7,96 @@
 import exception.InvalidPrimaryKeyException;
 import event.Event;
 import database.*;
+import exception.PasswordMismatchException;
 import impresario.IView;
 //import userinterface.View;
 //import userinterface.ViewFactory;
 
 
-public class PatronCollection
+public class PatronCollection extends EntityBase
 {
     private static final String myTableName = "Patron"; //establish database table name
 
-    private Vector<Patron> PatronList; //create booklist
+    private Vector<Patron> patronList; //create booklist
 
     public PatronCollection() {
+        super(myTableName);
         //super(myTableName); //saw this in account collection, looked important
         patronList = new Vector<Patron>(); //constructor
     }
 
-
-    public Vector<Patron> findPatronsOlderThanDate(String date) {
+    public Vector<Patron> findPatronsOlderThanDate (String date) throws PasswordMismatchException, InvalidPrimaryKeyException {
         // SQL Implementation here
         String query = "SELECT * FROM " + myTableName + " WHERE (dateOfBirth < '" + date +"')"); //query to find the books older than given date
         Vector allDataRetrieved = getSelectQueryResult(query);
-        return processPatronData(allDataRetrieved);
+
+        if (allDataRetrieved != null) //iterting through result of table query to add to new vector
+        {
+            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)
+            {
+                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase
 
+                patronList.add(new Patron(nextPatron));//update new booklist
+            }
+        }
+        return patronList;
     }
 
 
-    public Vector<Patron> findPatronsYoungerThan(String date) {
+    public Vector<Patron> findPatronsYoungerThan(String date) throws PasswordMismatchException, InvalidPrimaryKeyException {
         // SQL Implementation here
         String query = "SELECT * FROM " + myTableName + " WHERE (dateOfBirth > '" + date +"')"); //query to find the books older than given date
         Vector allDataRetrieved = getSelectQueryResult(query);
-        return processPatronData(allDataRetrieved);
 
+        if (allDataRetrieved != null) //iterting through result of table query to add to new vector
+        {
+            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)
+            {
+                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase
+                patronList.add(new Patron(nextPatron));//update new booklist
+            }
+        }
+        return patronList;
     }
 
 
-    public Vector<Patron> findPatronsAtZipCode(String zip){
+    public Vector<Patron> findPatronsAtZipCode(String zip) throws PasswordMismatchException, InvalidPrimaryKeyException {
 
         String query = "SELECT * FROM " + myTableName + " WHERE (zip > '" + zip +"')"); //query to find the books older than given date
         Vector allDataRetrieved = getSelectQueryResult(query);
-        return processPatronData(allDataRetrieved);
 
+        if (allDataRetrieved != null) //iterting through result of table query to add to new vector
+        {
+            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)
+            {
+                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase
+                patronList.add(new Patron(nextPatron));//update new booklist
+            }
+        }
+        return patronList;
     }
 
     public Vector<Patron> findPatronsWithNameLike(String name){
         // SQL Implementation here
         String query = "SELECT * FROM " + myTableName + " WHERE name LIKE '%" + name + "%'"; //sql query to find books written by same author
         Vector allDataRetrieved = getSelectQueryResult(query);
-        return processPatronData(allDataRetrieved);
-    }
 
-    private Vector<Patron> processPatronData(Vector<Patron> allDataRetrieved) {
-        if (allDataRetrieved != null) {
-            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++) {
-                Properties nextPatron = (Properties) allDataRetrieved.elementAt(cnt);
-                patronList.add(new Patron(nextPatron));
+        if (allDataRetrieved != null) //iterting through result of table query to add to new vector
+        {
+            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)
+            {
+                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase
+                patronList.add(new Patron(nextPatron));//update booklist
             }
         }
         return patronList;
     }
+
+    protected void initializeSchema(String table_name){
+        if(mySchema == null){
+            mySchema = getSchemaInfo(table_name);
+        }
+    }
+
+
 }
\ No newline at end of file
Index: app/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import database.JDBCBroker;\r\nimport exception.InvalidPrimaryKeyException;\r\nimport exception.PasswordMismatchException;\r\nimport model.Book;\r\nimport model.BookCollection;\r\nimport model.Patron;\r\nimport model.PatronCollection;\r\n\r\nimport java.util.*;\r\n\r\npublic class Main{\r\n    public static void main(String[] args) throws PasswordMismatchException, InvalidPrimaryKeyException {\r\n        System.out.println(\"Book system V1\");\r\n\r\n        JDBCBroker db = new JDBCBroker();\r\n        db.getConnection();\r\n\r\n        Book model_book = new Book();\r\n        BookCollection book_col = new BookCollection();\r\n        Patron model_patron = new Patron();\r\n        PatronCollection patron_col = new PatronCollection();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Main.java b/app/Main.java
--- a/app/Main.java	(revision 2846b654b4ad277e3ccb2d35cd024207c6e8516d)
+++ b/app/Main.java	(date 1739471142714)
@@ -15,10 +15,23 @@
         JDBCBroker db = new JDBCBroker();
         db.getConnection();
 
-        Book model_book = new Book();
-        BookCollection book_col = new BookCollection();
-        Patron model_patron = new Patron();
-        PatronCollection patron_col = new PatronCollection();
+
+        //Book model_book = new Book();
+        BookCollection book_col;
+        book_col = new BookCollection();
+        //Patron model_patron = new Patron();
+        PatronCollection patron_col;
+        patron_col = new PatronCollection();
+
+        Scanner scanner = new Scanner(System.in);
+
+        System.out.println("What would you like to do?");
+        System.out.println("1. Add a book");
+        System.out.println("2. Add a patron");
+        System.out.println("3.");
+
+
+
     }
 
 }
\ No newline at end of file
Index: model/Book.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.util.Properties;\r\nimport java.util.Vector;\r\nimport java.util.Enumeration;\r\nimport java.sql.*;\r\n\r\nimport database.Persistable;\r\nimport database.*;\r\nimport exception.InvalidPrimaryKeyException;\r\nimport exception.PasswordMismatchException;\r\n\r\npublic class Book {\r\n    private static String table_name = \"Book\";\r\n\r\n    public Book (String query_id) throws InvalidPrimaryKeyException, PasswordMismatchException {\r\n        super();\r\n\r\n        String query = \"SELECT * FROM\" + table_name + \" WHERE (ID= \" + query_id + \")\";\r\n\r\n        Vector dataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (dataRetrieved != null){\r\n            int size = dataRetrieved.size();\r\n\r\n            if (size !=1){\r\n                throw new InvalidPrimaryKeyException();\r\n            }else{\r\n                Properties retrievedBookData = (Properties)dataRetrieved.elementAt(0);\r\n                persistentState = new Properties();\r\n\r\n                Enumeration allKeys = retrievedBookData.propertyNames();\r\n                while(allKeys.hasMoreElements() == true){\r\n                    String nextKey = (String)allKeys.nextElement();\r\n                    String nextValue = retrievedBookData.getProperty(nextKey);\r\n\r\n                    if(nextValue != null){\r\n                        persistentState.setProperty(nextKey, NextValue);\r\n\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            throw new InvalidPrimaryKeyException(\"More than one value associated with that key\");\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/Book.java b/model/Book.java
--- a/model/Book.java	(revision 2846b654b4ad277e3ccb2d35cd024207c6e8516d)
+++ b/model/Book.java	(date 1739471124646)
@@ -4,45 +4,137 @@
 import java.util.Vector;
 import java.util.Enumeration;
 import java.sql.*;
-
-import database.Persistable;
 import database.*;
+
 import exception.InvalidPrimaryKeyException;
 import exception.PasswordMismatchException;
 
-public class Book {
+public class Book extends EntityBase{
     private static String table_name = "Book";
 
-    public Book (String query_id) throws InvalidPrimaryKeyException, PasswordMismatchException {
-        super();
+    protected Properties dependencies;
+    protected Properties persistentState;
+    private String updateStatusMessage = "";
+
+    public Book (String query_id) throws InvalidPrimaryKeyException{
+        super(table_name);
 
-        String query = "SELECT * FROM" + table_name + " WHERE (ID= " + query_id + ")";
+        String query = "SELECT * FROM " + table_name + " WHERE (ID= " + query_id + ")";
 
-        Vector dataRetrieved = getSelectQueryResult(query);
+        Vector<Properties> dataRetrieved = getSelectQueryResult(query);
 
-        if (dataRetrieved != null){
+        if (dataRetrieved != null) {
             int size = dataRetrieved.size();
 
-            if (size !=1){
-                throw new InvalidPrimaryKeyException();
-            }else{
-                Properties retrievedBookData = (Properties)dataRetrieved.elementAt(0);
+            if (size != 1) {
+                throw new InvalidPrimaryKeyException("More than one entry with that primary key");
+            } else {
+                Properties retrievedBookData = (Properties) dataRetrieved.elementAt(0);
                 persistentState = new Properties();
 
                 Enumeration allKeys = retrievedBookData.propertyNames();
-                while(allKeys.hasMoreElements() == true){
-                    String nextKey = (String)allKeys.nextElement();
+                while (allKeys.hasMoreElements() == true) {
+                    String nextKey = (String) allKeys.nextElement();
                     String nextValue = retrievedBookData.getProperty(nextKey);
 
-                    if(nextValue != null){
-                        persistentState.setProperty(nextKey, NextValue);
+                    if (nextValue != null) {
+                        persistentState.setProperty(nextKey, nextValue);
 
                     }
                 }
             }
-        }else{
+        } else {
             throw new InvalidPrimaryKeyException("More than one value associated with that key");
         }
+    }
+    public Book(Properties props){
+        super(table_name);
+
+        setDependencies();
+
+        persistentState = new Properties();
+        Enumeration allKeys = props.propertyNames();
+        while (allKeys.hasMoreElements() == true){
+            String nextKey = (String)allKeys.nextElement();
+            String nextValue = props.getProperty(nextKey);
+            if(nextValue != null){
+                persistentState.setProperty(nextKey, nextValue);
+            }
+        }
+    }
+
+    private void setDependencies(){
+        dependencies = new Properties();
+        myRegistry.setDependencies(dependencies);
+    }
 
+    public Object getState(String key){
+        if (key.equals("UpdateStatusMessage") == true)
+            return updateStatusMessage;
+        return persistentState.getProperty(key);
     }
-}
\ No newline at end of file
+
+    public void stateChangeRequest(String key, Object value)
+    {
+
+        myRegistry.updateSubscribers(key, this);
+    }
+
+    public static int compare(Book a, Book b)
+    {
+        String aNum = (String)a.getState("BookId");
+        String bNum = (String)b.getState("BookId");
+
+        return aNum.compareTo(bNum);
+    }
+
+    public Vector<String> getEntryListView()
+    {
+        Vector<String> v = new Vector<String>();
+
+        v.addElement(persistentState.getProperty("BookId"));
+        v.addElement(persistentState.getProperty("bookTitle"));
+        v.addElement(persistentState.getProperty("author"));
+        v.addElement(persistentState.getProperty("pubYear"));
+        v.addElement(persistentState.getProperty("status"));
+
+        return v;
+    }
+
+
+    private void updateStateInDatabase()
+    {
+        try
+        {
+            if (persistentState.getProperty("BookId") != null)
+            {
+                // update
+                Properties whereClause = new Properties();
+                whereClause.setProperty("BookId",
+                        persistentState.getProperty("BookId"));
+                updatePersistentState(mySchema, persistentState, whereClause);
+                updateStatusMessage = "Book data for book id : " + persistentState.getProperty("AccountNumber") + " updated successfully in database!";
+            }
+            else
+            {
+                // insert
+                Integer BookId =
+                        insertAutoIncrementalPersistentState(mySchema, persistentState);
+                persistentState.setProperty("BookId", "" + BookId.intValue());
+                updateStatusMessage = "Book data for new Book : " +  persistentState.getProperty("BookId")
+                        + "installed successfully in database!";
+            }
+        }
+        catch (SQLException ex)
+        {
+            updateStatusMessage = "Error in installing Book data in database!";
+        }
+        //DEBUG System.out.println("updateStateInDatabase " + updateStatusMessage);
+    }
+
+    protected void initializeSchema(String table_name){
+        if(mySchema == null){
+            mySchema = getSchemaInfo(table_name);
+        }
+    }
+}
Index: model/Patron.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\n\r\nimport java.util.Properties;\r\nimport java.util.Vector;\r\nimport java.util.Enumeration;\r\nimport java.sql.*;\r\n\r\nimport database.*;\r\nimport exception.InvalidPrimaryKeyException;\r\nimport exception.PasswordMismatchException;\r\n\r\npublic class Patron {\r\n    private static String table_name = \"Patron\";\r\n\r\n\r\n\r\n    public Patron (String query_id) throws InvalidPrimaryKeyException, PasswordMismatchException {\r\n        //super(table_name);\r\n\r\n        String query = \"SELECT * FROM\" + table_name + \" WHERE (ID= \" + query_Id + \")\";\r\n\r\n        Vector dataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (dataRetrieved != null){\r\n            int size = dataRetrieved.size();\r\n\r\n            if (size !=1){\r\n                throw new InvalidPrimaryKeyException();\r\n            }else{\r\n                Properties retrievedPatronData = (Properties)dataRetrieved.elementAt(0);\r\n                //persistentState = new Properties();\r\n\r\n                Enumeration allKeys = retrievedPatronData.propertyNames();\r\n                while(allKeys.hasMoreElements() == true){\r\n                    String nextKey = (String)allKeys.nextElement();\r\n                    String nextValue = retrievedPatronData.getProperty(nextKey);\r\n\r\n                    if(nextValue != null){\r\n                        //persistentState.setProperty(nextKey, NextValue);\r\n\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            throw new InvalidPrimaryKeyException(\"More than one value associated with that key\");\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/Patron.java b/model/Patron.java
--- a/model/Patron.java	(revision 2846b654b4ad277e3ccb2d35cd024207c6e8516d)
+++ b/model/Patron.java	(date 1739471124646)
@@ -10,24 +10,25 @@
 import exception.InvalidPrimaryKeyException;
 import exception.PasswordMismatchException;
 
-public class Patron {
+public class Patron extends EntityBase{
     private static String table_name = "Patron";
 
-
+    protected Properties persistentState;
+    protected Properties dependencies;
+    private String updateStatusMessage = "";
 
     public Patron (String query_id) throws InvalidPrimaryKeyException, PasswordMismatchException {
-        //super(table_name);
+        super(table_name);
 
-        String query = "SELECT * FROM" + table_name + " WHERE (ID= " + query_Id + ")";
+        String query = "SELECT * FROM" + table_name + " WHERE (ID= " + query_id + ")";
 
-        Vector dataRetrieved = getSelectQueryResult(query);
+        Vector<Properties> dataRetrieved = getSelectQueryResult(query);
 
         if (dataRetrieved != null){
             int size = dataRetrieved.size();
 
-            if (size !=1){
-                throw new InvalidPrimaryKeyException();
-            }else{
+            if (size !=1) throw new InvalidPrimaryKeyException("Wrong number of primary keys");
+            else{
                 Properties retrievedPatronData = (Properties)dataRetrieved.elementAt(0);
                 //persistentState = new Properties();
 
@@ -47,4 +48,99 @@
         }
 
     }
+
+    public Patron(Properties props){
+        super(table_name);
+
+        setDependencies();
+
+        persistentState = new Properties();
+        Enumeration allKeys = props.propertyNames();
+        while (allKeys.hasMoreElements() == true){
+            String nextKey = (String)allKeys.nextElement();
+            String nextValue = props.getProperty(nextKey);
+            if(nextValue != null){
+                persistentState.setProperty(nextKey, nextValue);
+            }
+        }
+    }
+
+    private void setDependencies(){
+        dependencies = new Properties();
+        myRegistry.setDependencies(dependencies);
+    }
+
+    public Object getState(String key){
+        if (key.equals("UpdateStatusMessage") == true)
+            return updateStatusMessage;
+        return persistentState.getProperty(key);
+    }
+
+    public void stateChangeRequest(String key, Object value)
+    {
+
+        myRegistry.updateSubscribers(key, this);
+    }
+
+    public static int compare(Book a, Book b)
+    {
+        String aNum = (String)a.getState("PatronId");
+        String bNum = (String)b.getState("PatronId");
+
+        return aNum.compareTo(bNum);
+    }
+
+    public Vector<String> getEntryListView()
+    {
+        Vector<String> v = new Vector<String>();
+
+        v.addElement(persistentState.getProperty("PatronId"));
+        v.addElement(persistentState.getProperty("address"));
+        v.addElement(persistentState.getProperty("city"));
+        v.addElement(persistentState.getProperty("dateOfBirth"));
+        v.addElement(persistentState.getProperty("email"));
+        v.addElement(persistentState.getProperty("name"));
+        v.addElement(persistentState.getProperty("stateCode"));
+        v.addElement(persistentState.getProperty("status"));
+        v.addElement(persistentState.getProperty("zip"));
+
+        return v;
+    }
+
+
+    private void updateStateInDatabase()
+    {
+        try
+        {
+            if (persistentState.getProperty("PatronId") != null)
+            {
+                // update
+                Properties whereClause = new Properties();
+                whereClause.setProperty("PatronId",
+                        persistentState.getProperty("PatronId"));
+                updatePersistentState(mySchema, persistentState, whereClause);
+                updateStatusMessage = "Patron data for Patron id : " + persistentState.getProperty("PatronId") + " updated successfully in database!";
+            }
+            else
+            {
+                // insert
+                Integer PatronId =
+                        insertAutoIncrementalPersistentState(mySchema, persistentState);
+                persistentState.setProperty("PatronId", "" + PatronId.intValue());
+                updateStatusMessage = "Patron data for new Patron : " +  persistentState.getProperty("PatronId")
+                        + "installed successfully in database!";
+            }
+        }
+        catch (SQLException ex)
+        {
+            updateStatusMessage = "Error in installing Patron data in database!";
+        }
+        //DEBUG System.out.println("updateStateInDatabase " + updateStatusMessage);
+    }
+
+    protected void initializeSchema(String table_name){
+        if(mySchema == null){
+            mySchema = getSchemaInfo(table_name);
+        }
+    }
 }
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_43_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_43_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_43_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1739471124630)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_43_[Changes]/shelved.patch	(date 1739471124630)
@@ -0,0 +1,89 @@
+Index: model/BookCollection.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package model; //in model folder\r\n\r\n// project imports (just copied from account collection, no idea what these do)\r\nimport java.util.Properties;\r\nimport java.util.Vector;\r\n//import javafx.scene.Scene;\r\nimport exception.InvalidPrimaryKeyException;\r\nimport event.Event;\r\nimport database.*;\r\nimport exception.PasswordMismatchException;\r\nimport impresario.IView;\r\n//import userinterface.View;\r\n//import userinterface.ViewFactory;\r\n\r\n\r\npublic class BookCollection {\r\n    private static final String myTableName = \"Book\"; //establish database table name\r\n\r\n    private Vector<Book> bookList; //create booklist\r\n\r\n    public BookCollection() {\r\n        //super(myTableName); //saw this in account collection, looked important\r\n        bookList = new Vector<Book>(); //constructor\r\n    }\r\n\r\n    public Vector<Book> findBooksOlderThanDate(String year) throws PasswordMismatchException, InvalidPrimaryKeyException {\r\n        // SQL Implementation here\r\n        String query = (\"SELECT * FROM \" + myTableName + \" WHERE (pubYear < '\" + year + \"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector (making sure its not empty)\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++) {\r\n                Properties nextBook = (Properties) allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n                bookList.add(new Book(nextBook));//update new booklist\r\n            }\r\n        }\r\n        return bookList;\r\n    }\r\n\r\n    public Vector<Book> findBooksNewerThanDate(String year) {\r\n        // SQL Implementation here                                          IF THE COLUMN/DATABASE USES A VARCHAR, we need single quotes ' instead of \" (see photo from class)\r\n        String query = (\"SELECT * FROM \" + myTableName + \" WHERE (pubYear > '\" + year + \"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++) {\r\n                Properties nextBook; //properties inhereted from Entitybase\r\n                nextBook = (Properties) allDataRetrieved.elementAt(cnt);\r\n                bookList.add(new Book(nextBook));//update new booklist\r\n            }\r\n        }\r\n        return bookList;\r\n    }\r\n\r\n    //CONFIGURE DBCONFIG.INI HAS THE RIGHT INFORMATION IN IT (IN INSTALL DIRECTORY OF INTELLIJ OR PROJECT)\r\n\r\n    public Vector<Book> findBooksWithTitleLike(String title) {\r\n        // SQL Implementation here\r\n        String query = \"SELECT * FROM \" + myTableName + \" WHERE bookTitle LIKE '%\" + title + \"%'\"; //sql query to find book titles similar to given string\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++) {\r\n                Properties nextBook = (Properties) allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n                bookList.add(new Book(nextBook));//update booklist\r\n            }\r\n        }\r\n        return bookList;\r\n    }\r\n\r\n    public Vector<Book> findBooksWithAuthorLike(String author) {\r\n        // SQL Implementation here\r\n        String query = \"SELECT * FROM \" + myTableName + \" WHERE author LIKE '%\" + author + \"%'\"; //sql query to find books written by same author\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++) {\r\n                Properties nextBook = (Properties) allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n                bookList.add(new Book(nextBook));//update booklist\r\n            }\r\n        }\r\n        return bookList;\r\n    }\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/model/BookCollection.java b/model/BookCollection.java
+--- a/model/BookCollection.java	(revision cf17ca2641adcbc97de87637a60018ddab96aaea)
++++ b/model/BookCollection.java	(date 1739398939349)
+@@ -13,7 +13,7 @@
+ //import userinterface.ViewFactory;
+ 
+ 
+-public class BookCollection {
++public abstract class BookCollection extends EntityBase {
+     private static final String myTableName = "Book"; //establish database table name
+ 
+     private Vector<Book> bookList; //create booklist
+Index: model/Patron.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package model;\r\n\r\n\r\nimport java.util.Properties;\r\nimport java.util.Vector;\r\nimport java.util.Enumeration;\r\nimport java.sql.*;\r\n\r\nimport database.*;\r\nimport exception.InvalidPrimaryKeyException;\r\nimport exception.PasswordMismatchException;\r\n\r\npublic class Patron {\r\n    private static String table_name = \"Patron\";\r\n\r\n\r\n\r\n    public Patron (String query_id) throws InvalidPrimaryKeyException, PasswordMismatchException {\r\n        //super(table_name);\r\n\r\n        String query = \"SELECT * FROM\" + table_name + \" WHERE (ID= \" + query_Id + \")\";\r\n\r\n        Vector dataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (dataRetrieved != null){\r\n            int size = dataRetrieved.size();\r\n\r\n            if (size !=1){\r\n                throw new InvalidPrimaryKeyException();\r\n            }else{\r\n                Properties retrievedPatronData = (Properties)dataRetrieved.elementAt(0);\r\n                //persistentState = new Properties();\r\n\r\n                Enumeration allKeys = retrievedPatronData.propertyNames();\r\n                while(allKeys.hasMoreElements() == true){\r\n                    String nextKey = (String)allKeys.nextElement();\r\n                    String nextValue = retrievedPatronData.getProperty(nextKey);\r\n\r\n                    if(nextValue != null){\r\n                        //persistentState.setProperty(nextKey, NextValue);\r\n\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            throw new InvalidPrimaryKeyException(\"More than one value associated with that key\");\r\n        }\r\n\r\n    }\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/model/Patron.java b/model/Patron.java
+--- a/model/Patron.java	(revision cf17ca2641adcbc97de87637a60018ddab96aaea)
++++ b/model/Patron.java	(date 1739398969505)
+@@ -10,7 +10,7 @@
+ import exception.InvalidPrimaryKeyException;
+ import exception.PasswordMismatchException;
+ 
+-public class Patron {
++public abstract class Patron extends EntityBase{
+     private static String table_name = "Patron";
+ 
+ 
+Index: model/PatronCollection.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package model; //in model folder\r\n\r\n// project imports (just copied from account collection, no idea what these do)\r\nimport java.util.Properties;\r\nimport java.util.Vector;\r\n//import javafx.scene.Scene;\r\nimport exception.InvalidPrimaryKeyException;\r\nimport event.Event;\r\nimport database.*;\r\nimport impresario.IView;\r\n//import userinterface.View;\r\n//import userinterface.ViewFactory;\r\n\r\n\r\npublic class PatronCollection\r\n{\r\n    private static final String myTableName = \"Patron\"; //establish database table name\r\n\r\n    private Vector<Patron> PatronList; //create booklist\r\n\r\n    public PatronCollection() {\r\n        //super(myTableName); //saw this in account collection, looked important\r\n        patronList = new Vector<Patron>(); //constructor\r\n    }\r\n\r\n\r\n    public Vector<Patron> findPatronsOlderThanDate(String date) {\r\n        // SQL Implementation here\r\n        String query = (\"SELECT * FROM \" + myTableName + \" WHERE (dateOfBirth < '\" + date +\"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)\r\n            {\r\n                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n\r\n                patronList.add(new Patron(nextPatron));//update new booklist\r\n            }\r\n        }\r\n        return patronList;\r\n    }\r\n\r\n\r\n    public Vector<Patron> findPatronsYoungerThan(String date) {\r\n        // SQL Implementation here\r\n        String query = (\"SELECT * FROM \" + myTableName + \" WHERE (dateOfBirth > '\" + date +\"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)\r\n            {\r\n                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n                patronList.add(new Patron(nextPatron));//update new booklist\r\n            }\r\n        }\r\n        return patronList;\r\n    }\r\n\r\n\r\n    public Vector<Patron> findPatronsAtZipCode(String zip){\r\n\r\n        String query = (\"SELECT * FROM \" + myTableName + \" WHERE (zip > '\" + zip +\"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)\r\n            {\r\n                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n                patronList.add(new Patron(nextPatron));//update new booklist\r\n            }\r\n        }\r\n        return patronList;\r\n    }\r\n\r\n    public Vector<Patron> findPatronsWithNameLike(String name){\r\n        // SQL Implementation here\r\n        String query = \"SELECT * FROM \" + myTableName + \" WHERE name LIKE '%\" + name + \"%'\"; //sql query to find books written by same author\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)\r\n            {\r\n                Properties nextBook= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n                patronList.add(new Book(nextBook));//update booklist\r\n            }\r\n        }\r\n        return patronList;\r\n    }\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/model/PatronCollection.java b/model/PatronCollection.java
+--- a/model/PatronCollection.java	(revision cf17ca2641adcbc97de87637a60018ddab96aaea)
++++ b/model/PatronCollection.java	(date 1739398939327)
+@@ -12,7 +12,7 @@
+ //import userinterface.ViewFactory;
+ 
+ 
+-public class PatronCollection
++public abstract class PatronCollection extends EntityBase
+ {
+     private static final String myTableName = "Patron"; //establish database table name
+ 
+Index: app/Main.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>import database.JDBCBroker;\r\nimport exception.InvalidPrimaryKeyException;\r\nimport exception.PasswordMismatchException;\r\nimport model.Book;\r\nimport model.BookCollection;\r\nimport model.Patron;\r\nimport model.PatronCollection;\r\n\r\nimport java.util.*;\r\n\r\npublic class Main{\r\n    public static void main(String[] args) throws PasswordMismatchException, InvalidPrimaryKeyException {\r\n        System.out.println(\"Book system V1\");\r\n\r\n        JDBCBroker db = new JDBCBroker();\r\n        db.getConnection();\r\n\r\n        Book model_book = new Book();\r\n        BookCollection book_col = new BookCollection();\r\n        Patron model_patron = new Patron();\r\n        PatronCollection patron_col = new PatronCollection();\r\n\r\n\r\n\r\n    }\r\n\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/Main.java b/app/Main.java
+--- a/app/Main.java	(revision cf17ca2641adcbc97de87637a60018ddab96aaea)
++++ b/app/Main.java	(date 1739398864390)
+@@ -15,11 +15,19 @@
+         JDBCBroker db = new JDBCBroker();
+         db.getConnection();
+ 
+-        Book model_book = new Book();
++
++        //Book model_book = new Book();
+         BookCollection book_col = new BookCollection();
+-        Patron model_patron = new Patron();
++        //Patron model_patron = new Patron();
+         PatronCollection patron_col = new PatronCollection();
+ 
++        Scanner scanner = new Scanner(System.in);
++
++        System.out.println("What would you like to do?");
++        System.out.println("1. Add a book");
++        System.out.println("2. Add a patron");
++        System.out.println("3.");
++
+ 
+ 
+     }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_55_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_55_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_55_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1739471124630)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_55_[Changes]/shelved.patch	(date 1739471124630)
@@ -0,0 +1,85 @@
+Index: model/PatronCollection.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package model; //in model folder\r\n\r\n// project imports (just copied from account collection, no idea what these do)\r\nimport java.util.Properties;\r\nimport java.util.Vector;\r\n//import javafx.scene.Scene;\r\nimport exception.InvalidPrimaryKeyException;\r\nimport event.Event;\r\nimport database.*;\r\nimport impresario.IView;\r\n//import userinterface.View;\r\n//import userinterface.ViewFactory;\r\n\r\n\r\npublic abstract class PatronCollection extends EntityBase\r\n{\r\n    private static final String myTableName = \"Patron\"; //establish database table name\r\n\r\n    private Vector<Patron> PatronList; //create booklist\r\n\r\n    public PatronCollection() {\r\n        //super(myTableName); //saw this in account collection, looked important\r\n        patronList = new Vector<Patron>(); //constructor\r\n    }\r\n\r\n\r\n    public Vector<Patron> findPatronsOlderThanDate(String date) {\r\n        // SQL Implementation here\r\n        String query = (\"SELECT * FROM \" + myTableName + \" WHERE (dateOfBirth < '\" + date +\"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)\r\n            {\r\n                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n\r\n                patronList.add(new Patron(nextPatron));//update new booklist\r\n            }\r\n        }\r\n        return patronList;\r\n    }\r\n\r\n\r\n    public Vector<Patron> findPatronsYoungerThan(String date) {\r\n        // SQL Implementation here\r\n        String query = (\"SELECT * FROM \" + myTableName + \" WHERE (dateOfBirth > '\" + date +\"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)\r\n            {\r\n                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n                patronList.add(new Patron(nextPatron));//update new booklist\r\n            }\r\n        }\r\n        return patronList;\r\n    }\r\n\r\n\r\n    public Vector<Patron> findPatronsAtZipCode(String zip){\r\n\r\n        String query = (\"SELECT * FROM \" + myTableName + \" WHERE (zip > '\" + zip +\"')\"); //query to find the books older than given date\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)\r\n            {\r\n                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n                patronList.add(new Patron(nextPatron));//update new booklist\r\n            }\r\n        }\r\n        return patronList;\r\n    }\r\n\r\n    public Vector<Patron> findPatronsWithNameLike(String name){\r\n        // SQL Implementation here\r\n        String query = \"SELECT * FROM \" + myTableName + \" WHERE name LIKE '%\" + name + \"%'\"; //sql query to find books written by same author\r\n        Vector allDataRetrieved = getSelectQueryResult(query);\r\n\r\n        if (allDataRetrieved != null) //iterting through result of table query to add to new vector\r\n        {\r\n            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)\r\n            {\r\n                Properties nextBook= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase\r\n                patronList.add(new Book(nextBook));//update booklist\r\n            }\r\n        }\r\n        return patronList;\r\n    }\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/model/PatronCollection.java b/model/PatronCollection.java
+--- a/model/PatronCollection.java	(revision f3a077d1363a21889ac628563de9b9e250eae4d5)
++++ b/model/PatronCollection.java	(date 1739400896250)
+@@ -28,17 +28,8 @@
+         // SQL Implementation here
+         String query = ("SELECT * FROM " + myTableName + " WHERE (dateOfBirth < '" + date +"')"); //query to find the books older than given date
+         Vector allDataRetrieved = getSelectQueryResult(query);
++        return processPatronData(allDataRetrieved);
+ 
+-        if (allDataRetrieved != null) //iterting through result of table query to add to new vector
+-        {
+-            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)
+-            {
+-                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase
+-
+-                patronList.add(new Patron(nextPatron));//update new booklist
+-            }
+-        }
+-        return patronList;
+     }
+ 
+ 
+@@ -46,16 +37,8 @@
+         // SQL Implementation here
+         String query = ("SELECT * FROM " + myTableName + " WHERE (dateOfBirth > '" + date +"')"); //query to find the books older than given date
+         Vector allDataRetrieved = getSelectQueryResult(query);
++        return processPatronData(allDataRetrieved);
+ 
+-        if (allDataRetrieved != null) //iterting through result of table query to add to new vector
+-        {
+-            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)
+-            {
+-                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase
+-                patronList.add(new Patron(nextPatron));//update new booklist
+-            }
+-        }
+-        return patronList;
+     }
+ 
+ 
+@@ -63,29 +46,22 @@
+ 
+         String query = ("SELECT * FROM " + myTableName + " WHERE (zip > '" + zip +"')"); //query to find the books older than given date
+         Vector allDataRetrieved = getSelectQueryResult(query);
++        return processPatronData(allDataRetrieved);
+ 
+-        if (allDataRetrieved != null) //iterting through result of table query to add to new vector
+-        {
+-            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)
+-            {
+-                Properties nextPatron= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase
+-                patronList.add(new Patron(nextPatron));//update new booklist
+-            }
+-        }
+-        return patronList;
+     }
+ 
+     public Vector<Patron> findPatronsWithNameLike(String name){
+         // SQL Implementation here
+         String query = "SELECT * FROM " + myTableName + " WHERE name LIKE '%" + name + "%'"; //sql query to find books written by same author
+         Vector allDataRetrieved = getSelectQueryResult(query);
++        return processPatronData(allDataRetrieved);
++    }
+ 
+-        if (allDataRetrieved != null) //iterting through result of table query to add to new vector
+-        {
+-            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++)
+-            {
+-                Properties nextBook= (Properties)allDataRetrieved.elementAt(cnt); //properties inhereted from Entitybase
+-                patronList.add(new Book(nextBook));//update booklist
++    private Vector<Patron> processPatronData(Vector<Patron> allDataRetrieved) {
++        if (allDataRetrieved != null) {
++            for (int cnt = 0; cnt < allDataRetrieved.size(); cnt++) {
++                Properties nextPatron = (Properties) allDataRetrieved.elementAt(cnt);
++                patronList.add(new Patron(nextPatron));
+             }
+         }
+         return patronList;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"86ae0a6b-0078-4fba-87f8-ff445934a79b\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Assignement1_CSC429.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Assignement1_CSC429.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/model/BookCollection.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/BookCollection.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/model/PatronCollection.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/PatronCollection.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;arihawk112&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/ValG4/Assignement1_CSC429&quot;,\r\n    &quot;accountId&quot;: &quot;410c26ec-dd18-4f8f-8286-4738cd4b54d6&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2sg755vVS4APxfRHZFSgcnQ0O9F\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/arion/Downloads/openjfx-23.0.2_windows-x64_bin-sdk.zip&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Unnamed\" type=\"Java Scratch\" nameIsGenerated=\"true\">\r\n      <module name=\"Assignement1_CSC429\" />\r\n      <shortenClasspath name=\"NONE\" />\r\n      <option name=\"VM_PARAMETERS\" value=\"--module-path &quot;C:\\Users\\arion\\Downloads\\javafx-sdk-21\\lib&quot; --add-modules javafx.controls,javafx.fxml \" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <module name=\"OOSE\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <module name=\"OOSE\" />\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"ShConfigurationType\">\r\n      <option name=\"SCRIPT_TEXT\" value=\"\" />\r\n      <option name=\"INDEPENDENT_SCRIPT_PATH\" value=\"true\" />\r\n      <option name=\"SCRIPT_PATH\" value=\"\" />\r\n      <option name=\"SCRIPT_OPTIONS\" value=\"\" />\r\n      <option name=\"INDEPENDENT_SCRIPT_WORKING_DIRECTORY\" value=\"true\" />\r\n      <option name=\"SCRIPT_WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"INDEPENDENT_INTERPRETER_PATH\" value=\"true\" />\r\n      <option name=\"INTERPRETER_PATH\" value=\"powershell.exe\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"EXECUTE_IN_TERMINAL\" value=\"true\" />\r\n      <option name=\"EXECUTE_SCRIPT_FILE\" value=\"true\" />\r\n      <envs />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"86ae0a6b-0078-4fba-87f8-ff445934a79b\" name=\"Changes\" comment=\"\" />\r\n      <created>1738865177649</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1738865177649</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2846b654b4ad277e3ccb2d35cd024207c6e8516d)
+++ b/.idea/workspace.xml	(date 1739471143553)
@@ -4,11 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="86ae0a6b-0078-4fba-87f8-ff445934a79b" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="c9d069b4-7cab-4f45-818a-e8fba3586965" name="Changes" comment="patch">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Assignement1_CSC429.iml" beforeDir="false" afterPath="$PROJECT_DIR$/Assignement1_CSC429.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/Book.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/Book.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/model/BookCollection.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/BookCollection.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/model/PatronCollection.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/PatronCollection.java" afterDir="false" />
     </list>
@@ -23,82 +22,101 @@
   <component name="GitHubPullRequestSearchHistory">{
   &quot;lastFilter&quot;: {
     &quot;state&quot;: &quot;OPEN&quot;,
-    &quot;assignee&quot;: &quot;arihawk112&quot;
+    &quot;assignee&quot;: &quot;ValG4&quot;
   }
 }</component>
   <component name="GithubPullRequestsUISettings">{
   &quot;selectedUrlAndAccountId&quot;: {
-    &quot;url&quot;: &quot;https://github.com/ValG4/Assignement1_CSC429&quot;,
-    &quot;accountId&quot;: &quot;410c26ec-dd18-4f8f-8286-4738cd4b54d6&quot;
+    &quot;url&quot;: &quot;https://github.com/ValG4/Assignement1_CSC429.git&quot;,
+    &quot;accountId&quot;: &quot;fd2deb51-0a51-408b-9b86-84c3e896b56f&quot;
   }
 }</component>
+  <component name="ProblemsViewState">
+    <option name="selectedTabId" value="CurrentFile" />
+  </component>
   <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 1
+  &quot;customColor&quot;: &quot;&quot;,
+  &quot;associatedIndex&quot;: 6
 }</component>
-  <component name="ProjectId" id="2sg755vVS4APxfRHZFSgcnQ0O9F" />
+  <component name="ProjectId" id="2swsOiRrrwQX5NurtgL6VnBqjk8" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
+    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
     &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
     &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/arion/Downloads/openjfx-23.0.2_windows-x64_bin-sdk.zip&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;
   }
 }</component>
-  <component name="RunManager">
-    <configuration name="Unnamed" type="Java Scratch" nameIsGenerated="true">
-      <module name="Assignement1_CSC429" />
-      <shortenClasspath name="NONE" />
-      <option name="VM_PARAMETERS" value="--module-path &quot;C:\Users\arion\Downloads\javafx-sdk-21\lib&quot; --add-modules javafx.controls,javafx.fxml " />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration default="true" type="JetRunConfigurationType">
-      <module name="OOSE" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
-      <module name="OOSE" />
-      <option name="filePath" />
-      <method v="2" />
-    </configuration>
-    <configuration default="true" type="ShConfigurationType">
-      <option name="SCRIPT_TEXT" value="" />
-      <option name="INDEPENDENT_SCRIPT_PATH" value="true" />
-      <option name="SCRIPT_PATH" value="" />
-      <option name="SCRIPT_OPTIONS" value="" />
-      <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="true" />
-      <option name="SCRIPT_WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-      <option name="INDEPENDENT_INTERPRETER_PATH" value="true" />
-      <option name="INTERPRETER_PATH" value="powershell.exe" />
-      <option name="INTERPRETER_OPTIONS" value="" />
-      <option name="EXECUTE_IN_TERMINAL" value="true" />
-      <option name="EXECUTE_SCRIPT_FILE" value="true" />
-      <envs />
-      <method v="2" />
-    </configuration>
-  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="86ae0a6b-0078-4fba-87f8-ff445934a79b" name="Changes" comment="" />
-      <created>1738865177649</created>
+      <changelist id="c9d069b4-7cab-4f45-818a-e8fba3586965" name="Changes" comment="" />
+      <created>1739377943021</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
-      <updated>1738865177649</updated>
+      <updated>1739377943021</updated>
+    </task>
+    <task id="LOCAL-00001" summary="App improvement and started bug fixing/resolving">
+      <option name="closed" value="true" />
+      <created>1739379085273</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1739379085273</updated>
+    </task>
+    <task id="LOCAL-00002" summary="Bug fixing">
+      <option name="closed" value="true" />
+      <created>1739379815965</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1739379815965</updated>
+    </task>
+    <task id="LOCAL-00003" summary="added method to book.java">
+      <option name="closed" value="true" />
+      <created>1739400191545</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1739400191545</updated>
+    </task>
+    <task id="LOCAL-00004" summary="patch">
+      <option name="closed" value="true" />
+      <created>1739400971878</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1739400971878</updated>
     </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="App improvement and started bug fixing/resolving" />
+    <MESSAGE value="Bug fixing" />
+    <MESSAGE value="added method to book.java" />
+    <MESSAGE value="fixes and methods added" />
+    <MESSAGE value="patch" />
+    <option name="LAST_COMMIT_MESSAGE" value="patch" />
+  </component>
 </project>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_43__Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_43__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_43__Changes_.xml
new file mode 100644
--- /dev/null	(date 1739471124630)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_43__Changes_.xml	(date 1739471124630)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_12_02_2025_23_43_[Changes]" date="1739400215464" recycled="false" toDelete="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_02_2025_23_43_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/02/2025 23:43 [Changes]" />
+</changelist>
\ No newline at end of file
